Index: src/main/java/ParentAdminApplication/AdminController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ParentAdminApplication;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api\")\npublic class AdminController {\n\n    private final JsonService jsonService;\n\n    @Autowired\n    public AdminController(JsonService jsonService) {\n        this.jsonService = jsonService;\n    }\n\n    @PostMapping(\"/events\")\n    public ResponseEntity<String> createEvent(@RequestBody Event event) {\n        try {\n            jsonService.saveEvent(event);\n            return ResponseEntity.ok(\"Event saved successfully\");\n        } catch (Exception e) {\n            return ResponseEntity.status(500).body(\"Error saving event\");\n        }\n    }\n}\n\n
===================================================================
diff --git a/src/main/java/ParentAdminApplication/AdminController.java b/src/main/java/ParentAdminApplication/AdminController.java
--- a/src/main/java/ParentAdminApplication/AdminController.java	(revision e8bad9506a7a279de81bd308d7eaef43ec9b2fc3)
+++ b/src/main/java/ParentAdminApplication/AdminController.java	(date 1744829945219)
@@ -1,28 +1,58 @@
-package ParentAdminApplication;
-
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.http.ResponseEntity;
-import org.springframework.web.bind.annotation.*;
-
-@RestController
-@RequestMapping("/api")
-public class AdminController {
-
-    private final JsonService jsonService;
-
-    @Autowired
-    public AdminController(JsonService jsonService) {
-        this.jsonService = jsonService;
-    }
-
-    @PostMapping("/events")
-    public ResponseEntity<String> createEvent(@RequestBody Event event) {
-        try {
-            jsonService.saveEvent(event);
-            return ResponseEntity.ok("Event saved successfully");
-        } catch (Exception e) {
-            return ResponseEntity.status(500).body("Error saving event");
-        }
-    }
-}
+//package ParentAdminApplication;
+//
+//import org.springframework.beans.factory.annotation.Autowired;
+//import org.springframework.http.ResponseEntity;
+//import org.springframework.web.bind.annotation.*;
+//
+//import java.io.IOError;
+//import java.io.IOException;
+//import java.util.List;
+//
+//@RestController
+//@RequestMapping
+//public class AdminController {
+//    @Autowired
+//    private EventJsonService eventJsonService;
+//
+//    @GetMapping("/events")
+//    public ResponseEntity<List<Event>> getAllEvents() throws IOException {
+//        return ResponseEntity.ok(eventJsonService.readEvents());
+//    }
+//    @PostMapping("/events")
+//    public ResponseEntity<String> addEvent(@RequestBody Event event) {
+//        try {
+//            eventJsonService.addEvent(event);
+//            return ResponseEntity.ok("Event has been added");
+//        } catch (IOException e) {
+//            return ResponseEntity.internalServerError().body ("Error adding event:"+ e.getMessage());
+//        }
+//    }
+//    @PutMapping ("/events/{eventId}")
+//    public ResponseEntity<String> updateEvent(@PathVariable String eventId,
+//                                              @RequestParam String newTime,
+//                                              @RequestParam String newPlace) {
+//    try {
+//        boolean updated = eventJsonService.updateEvent(eventId, newTime, newPlace);
+//        if (updated) {
+//            return ResponseEntity.ok("Event has been updated");
+//        } else {
+//            return ResponseEntity.status(404).body("Event is not found");
+//        }
+//    } catch (IOException e) {
+//        return ResponseEntity.internalServerError().body("Error updating event:"+ e.getMessage());
+//    }
+//    /*// Removing method @DeleteMapping("/events/{eventId}")
+//        // public ResponseEntity<String> deleteEvent(@PathVariable String eventId) {
+//        // try {
+//        // boolean deleted = eventJsonService.deleteEvent(eventId);
+//            if (deleted) {
+//                return ResponseEntity.ok("Event has been deleted");
+//            } else {
+//                return ResponseEntity.status(404).body("Event is not found" + eventId);
+//            }
+//        } catch (IOException e) {
+//            return ResponseEntity.internalServerError().body("Error occurred deleting event" + e.getMessage());
+//            }*/
+//        }
+//    }
 
